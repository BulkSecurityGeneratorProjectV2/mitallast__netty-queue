package org.mitallast.queue.security;

import com.typesafe.config.Config;
import com.typesafe.config.ConfigFactory;
import org.junit.Assert;
import org.junit.Test;
import org.mitallast.queue.common.BaseTest;

import java.math.BigInteger;
import java.util.Random;


public class ECDHTest extends BaseTest {

    @Test
    public void testBigInteger() throws Exception {
//        Random rnd = new Random(0);
//
//        int keySize = 4096;
//        BigInteger[] primes = new BigInteger[2];
//        BigInteger p = BigInteger.probablePrime(keySize, rnd);
//        BigInteger q = BigInteger.probablePrime(keySize, rnd);
//        while (p.equals(q)) {
//            q = BigInteger.probablePrime(keySize, rnd);
//        }
//
//        if (p.subtract(q).compareTo(BigInteger.ZERO) < 0) {
//            primes[0] = q;
//            primes[1] = p;
//        } else {
//            primes[0] = p;
//            primes[1] = q;
//        }
//
//        p = primes[0];
//        q = primes[1];
//        BigInteger n = p.multiply(q);
//        BigInteger phi = lcm(p.subtract(BigInteger.ONE), q.subtract(BigInteger.ONE));
//        BigInteger e = chooseExponent(keySize, phi);
//        BigInteger d = e.modInverse(phi);
//        BigInteger exp1 = d.mod(p.subtract(BigInteger.ONE));
//        BigInteger exp2 = d.mod(q.subtract(BigInteger.ONE));
//        BigInteger coe = q.modInverse(p);
//
//        System.out.println();


        BigInteger c = new BigInteger("485298820449666651127573742396314567971727653163728729001815758601589926335881577560478458624295174166653609997444057211112461693527563473842755021134715412676676821687843735597078030667667619610210117931567790707549216902884659441889162141029146200067513342833094054212682288865553475393126669742031627021682522757837948135031868166588462286172865054207292206262410273794462238417809400510854609669499137123408137828187010237909479195849140551428692575431911851281537474335272782353274452674322502301872135888976032412224186260154332939855858003817389017365102192621579782262144429190936723720322479018003963580440396459688920638610834129669257335046967570150286978315295321406141142856979166449295930595518878739271177031897649178996225738140108544064998768376030238397474551627712534239840245992320053220876517847833404199373876307327518507229050560284908068404741335421581502797434045550735656511258344375461100925659445609262653162551560549806745236232559648614290381789762382596061711310474657010418386079074131283699407990317139983650941254172847120651053092753594324431650672702940661736257352732610491595911143179337771565226031576759540862629795554284200521996070853585700609021307442084385368500630216136094519293591484356551572962792722248570136329843839170338530726884379811136509067876979191055684764396669213266172596576316532977086174128621263070865992521887189024684162963768607275012731730196734733339852505024590637388757072589542619889383281773570442637833687327645628749960626831910926169081107154470113258062379499119174981455858626488443058010640391705694545104057718545357496435096454525600460813139830013159621107351073196186384187888767981947181026130313395028845744178840875601050245571410124931666640772890259484327964594651259556220648145151068029658092123186948330151322910663546914586567390190851818010695436640442593362177161949104467431156052339649313949747306143961798343904590012615638974558804252414735470908723152320798093946065070010431851986446863969253376800921132273757869057814594397853801847853226752162519941484130047780755040109246435463662906217188995781162179876881960675217952557232449391420161895197986424565188511410991711376478433490619922920371062974211679157179848229110147605461368306369984825135051187855485426019979950844462458620934870319053772402821303241597136158125999975839988980848191394089999093516005281037513955445813461267718264625022180316914034222456233359993490990065316332168816844579100221640075");
        BigInteger m = new BigInteger("485298820449666651127573742396314567971727653163728729001815758601589926335881577560478458624295174166653609997444057211112461693527563473842755021134715412676676821687843735597078030667667619610210117931567790707549216902884659441889162141029146200067513342833094054212682288865553475393126669742031627021682522757837948135031868166588462286172865054207292206262410273794462238417809400510854609669499137123408137828187010237909479195849140551428692575431911851281537474335272782353274452674322502301872135888976032412224186260154332939855858003817389017365102192621579782262144429190936723720322479018003963580440396459688920638610834129669257335046967570150286978315295321406141142856979166449295930595518878739271177031897649178996225738140108544064998768376030238397474551627712534239840245992320053220876517847833404199373876307327518507229050560284908068404741335421581502797434045550735656511258344375461100925659445609262653162551560549806745236232559648614290381789762382596061711310474657010418386079074131283699407990317139983650941254172847120651053092753594324431650672702940661736257352732610491595911143179337771565226031576759540862629795554284200521996070853585700609021307442084385368500630216136094519293591484356551572962792722248570136329843839170338530726884379811136509067876979191055684764396669213266172596576316532977086174128621263070865992521887189024684162963768607275012731730196734733339852505024590637388757072589542619889383281773570442637833687327645628749960626831910926169081107154470113258062379499119174981455858626488443058010640391705694545104057718545357496435096454525600460813139830013159621107351073196205905181886906337476243944035697423905845452589822593628386089221752079730788958947010125429911064134103675406976022526630757686923370099895022971494229966083851323971612685630946069356458156885826186864675450790097869745125308496442461468377846310343930760587985939953582024110792428571627690964706927497869797105196978733501370636407767379393243876742029957924216616883288593281621282630995242782317677073519615941660349196509706221912704943698029033387415688108881776530090011011183055521805651267199809194878007321153038143730742073019264614676157512488472134482542517980167290272538267148510814833604599472900194746160537215339696540435923859551601066281605025036315931141861857127896324747633868007971109174736151654877021540982599174500516333461852649292261818624150133849891323340678257105622156429613140413835");
        BigInteger pk_d = new BigInteger("108578389455409979832006468492198970933061430879856693998597324875307700048244887385439428342438259564655973994058057027915550425065988775407285694398008011081687996099792505902423802161458183257338333634233508458969586120658749775365722684140703678601131336769984968540244838009985267317536226532732861059991562528210849948228269725093101919542249310963246924860674596588084192204574466821468041710254840482691211981762301705503154869832504370289130699902432418069352660605066460726417901219110525798709609939392382008079619643157295617984222331665787883655173345985991697710806982151469059762838267959064773270312339173124420310743970070999882296380470020815853372891963703970706440412265033816741529006967746750778953353804864471813197149218248966540663489884023399807528157486499622562352735696837173315637008446323801073196584226862754269444952362116600805740602701237778046179589771997906648221788349659969883544519253991345112450693308720658363852739275954067387254751734742596814909131968009433563149207332698386327657634151147826980235913953767219345715008370624266313787711819992458769359360599750003797673573598997971747541504772167281070516631992508450539652309008289706533565915674632525637730884729314081050395130926146465667218610142703594270143361780674618836702845286903331350523296362470018830273867806503276297449068755298269564074622055134959893764825871911866311307173877245430739982120576343648478252524538876050052173244689615981974289292539582372000154291993415542002363506714117983539923408486833221514088183849934058824553387362573740546972350482054249363809612239775032940931830173186409155027127530157837617874831686993195603643930238270851679084805920252553823501211959278491174762976214553818582366466955666827451156902770029346930377815843814788172573180978868420257874178419980537170074939780854677000314409215484860976205284069162327202249489238613244289205109012653232078593175339166753663094951958188276474145676786515999719232114160200916176730424714160548878942752115335890848208337046711429691158904289262856676643181264657263386195638522877937717939888373198340071877510513770240893976289384216547893914456567919163283008301377562698321241633897784446234846108707885017339723984302413106473038378693397399411713199900881367983194015542100110616469165645068507927630496424221463331050816346788670492836048061603316461409772531202727189118317810404917215662379111379161395380143890950135891925861203777564570044392012447763369469");
        BigInteger pk_n = new BigInteger("875634407900394451200212915704625094307193900855369511878678016678575219609244323434593687770793933631459422702311298724146472749329827641952714306091249563320021077415271790346050625876012900366837052470904437252430978999976401252527460940858118195398281393853822648707858155121159572035296541617364717498786075572960698438171171202311194069566617407828173126060066110534119213670422355949927624900031348876255314185729632350872240546420949592912699874423476733175466547931795802165579669447896729163568413206774229825891414038486278959814417878156695347588558020477228119813155797277484703955990780978875293102966481194374170176439609207455045229991218095373160811762375170338536824635117370978609614027599334069176520147226365120298044754705708965884039805680782606315753302212986502097299451510368659145874066128974138552238378113840390809091966832319915528742545944485811271078035494419926563441878933075563926143253571980086120870969869565739835940492241640884146760943832962850991708760009114002911051925930610839038097425994628210423900424035066538090519018514302056733824095751002487274681753253806351220642482499120509681835376695876992156408852009131040023471315799866706050255745159342815232591377406466765715876171711816052329738115549673220970017004958089928263876929442041075014388179487174486656262377685173156308605107061292019130378997305526072769771152552050049343455587891147103093659176601769179287567459767009119447838997099315975909568160229908228510841486677661109240345177393406097476470236448176764612358207518296416604929578550266601820052991260243271443067050961386885359421843807426091845337765796673556773231230869417949715027700953532167961002778727523713340508861034358629657814656916258693693768734728241134934569257278630401482048493833475236079664196561884892266242539658053230535837095169643202378143041244558893343497202298740926105764092838093815875047831920372572158645421564410487989660712180177358913061734792837595343736083776317444645400032667310395195335860878576429897754405074306250523944105073187446714342015504491517337267680623203109366594218062852687489685502979162930375945499956810443922400668872643638780053126493447267319852772150405696624511257001835385144663010991867305609539436489296433748227183121975591491919235211072779988604298480479003408175858538476173459192436803665051448955893812831409822643085310728366394216635457074612735182450727538935827021184467656861363160450941192924416545561724765725104619");
        BigInteger pm = new BigInteger("39574047535847534741501520902448480040163006596401241524194758668102698139729909039789252475681020243431353069981725308148801591321454147973504451181852820141520151537305258058138068199428512167220565809418500217928927500229833207181588865205156874018329955768521437375628752623520666624842340952825267204265033225063353853610820998956666674047204561026435490240959803021408458165901961440363118267771478024029077588344025998242444910060994525106027981522633343049070567037139925501240397949165889642349020530119038343529497046169561374481387575446155343992223478467943523867226584542226864100721724600549351743460551750276986928716597714417646461566107845421629712336613130475254641194529579767445825735945031112477290729858171562953102400829909705898548497620882707887002657516982161732752070351917160336702281517775229390853733833541567869855237873856489685774146243470149452002259599915658238720739875480478678418025151847110993719486599170434040951331121040938107340039774989117989848860852507551685387647519040617668594022063033838584625006565003495137747026053987920061534896451584432681106046613740717604074744073280999362728358250601180888634945760770543243959812926538813380231252596926406916097225912110581592118208106207780309964372020302431361047492146150894981976149603426503717141518021119390469768302902321040915872930922969163854003394718917100209433249938109176874756995567072805044848563031385324112085869930109302583568082288127067886865599581159820204179358610026350920573071909738536441398742533312655158278640244161842023293367590771215335265153148270547667801221280931732503874007861249979966757827065327437529849657221178838354324241611452232164991579389557963600915017802351839832295988787123929621168606620990071627096809052473617306923324543584952875306487933535266879228260988697997330246475942317416403342660800439127595056372067910009113636778795391977584864996423554522718544280556747148774050231903396810390610197652736021144877238933674399625588177359555638221046883697876780989278832476539846008216330369422057128536843152381246369134270137605833026921840803486081634368077821357357019868324916940143248900358555458039167102125397400689647111656267145680046685937833147762890647614249313965263490783270780892709769308672025740302662884102377764846995128885948447394310498694814982563987074176804697986413991320503696879847519680149902226570152202897691033366036040589862796404519060714931376148647664928817799889631355315777070");
        BigInteger res = c.modPow(pk_d, pk_n);
        System.out.println();
    }

    private BigInteger lcm(BigInteger a, BigInteger b) {
        return (a.multiply(b).divide(a.gcd(b)));
    }

    private BigInteger chooseExponent(int keySize, BigInteger phi) {
        Random rnd = new Random(0);
        BigInteger exp = BigInteger.probablePrime(keySize / 10, rnd);
        while (phi.subtract(exp).compareTo(BigInteger.ZERO) < 0 && !exp.gcd(phi).equals(BigInteger.ZERO)) {
            exp = exp.nextProbablePrime();
        }
        return exp;
    }

    @Test
    public void testFlow() throws Exception {
        Config config = ConfigFactory.defaultReference();
        SecurityService securityService = new SecurityService(config);
        ECDHFlow alice = securityService.ecdh();
        ECDHFlow bob = securityService.ecdh();

        bob.keyAgreement(alice.requestStart());
        alice.keyAgreement(bob.responseStart());

        byte[] source = randomBytes(1024);
        ECDHEncrypted encrypted = bob.encrypt(source);

        byte[] decrypted = alice.decrypt(encrypted);
        Assert.assertArrayEquals(source, decrypted);
        decrypted = alice.decrypt(encrypted);
        Assert.assertArrayEquals(source, decrypted);
        decrypted = alice.decrypt(encrypted);
        Assert.assertArrayEquals(source, decrypted);
    }

    @Test
    public void benchmarkEncryptRSA() throws Exception {
        Config config = ConfigFactory.defaultReference();
        SecurityService securityService = new SecurityService(config);

        byte[] data = randomBytes(200);
        int total = 10000;
        long start = System.currentTimeMillis();
        byte[] encrypted = randomBytes(1);
        for (int i = 0; i < total; i++) {
            encrypted = securityService.encrypt(data);
        }
        long end = System.currentTimeMillis();
        printQps("encrypt", total, start, end);

        total = 1000;
        start = System.currentTimeMillis();
        for (int i = 0; i < total; i++) {
            byte[] decrypted = securityService.decrypt(encrypted);
            assert decrypted.length == data.length;
        }
        end = System.currentTimeMillis();
        printQps("decrypt", total, start, end);
    }

    @Test
    public void benchmarkEncryptAES() throws Exception {
        Config config = ConfigFactory.defaultReference();
        SecurityService securityService = new SecurityService(config);
        ECDHFlow alice = securityService.ecdh();
        ECDHFlow bob = securityService.ecdh();

        bob.keyAgreement(alice.requestStart());
        alice.keyAgreement(bob.responseStart());

        byte[] source = randomBytes(256);
        ECDHEncrypted encrypted = bob.encrypt(source);
        int total = 100000;
        long start = System.currentTimeMillis();
        for (int i = 0; i < total; i++) {
            encrypted = bob.encrypt(source);
        }
        long end = System.currentTimeMillis();
        printQps("encrypt", total, start, end);

        start = System.currentTimeMillis();
        for (int i = 0; i < total; i++) {
            byte[] decrypted = alice.decrypt(encrypted);
            assert decrypted.length == source.length;
        }
        end = System.currentTimeMillis();
        printQps("decrypt", total, start, end);
    }

    @Test
    public void benchmarkSignRSA() throws Exception {
        Config config = ConfigFactory.defaultReference();
        SecurityService securityService = new SecurityService(config);

        byte[] data = randomBytes(1024);
        byte[] sign = randomBytes(1);

        int total = 100;
        long start = System.currentTimeMillis();
        for (int i = 0; i < total; i++) {
            sign = securityService.sign(data);
        }
        long end = System.currentTimeMillis();
        printQps("sign", total, start, end);

        total = 10000;
        start = System.currentTimeMillis();
        for (int i = 0; i < total; i++) {
            assert securityService.verify(data, sign);
        }
        end = System.currentTimeMillis();
        printQps("verify", total, start, end);
    }

    @Test
    public void benchmarkSignHMac() throws Exception {
        Config config = ConfigFactory.defaultReference();
        SecurityService securityService = new SecurityService(config);
        ECDHFlow alice = securityService.ecdh();
        ECDHFlow bob = securityService.ecdh();

        bob.keyAgreement(alice.requestStart());
        alice.keyAgreement(bob.responseStart());

        byte[] iv = randomBytes(256);
        byte[] data = randomBytes(256);
        byte[] sign = randomBytes(1);

        for (int k = 0; k < 3; k++) {
            int total = 1000000;
            long start = System.currentTimeMillis();
            for (int i = 0; i < total; i++) {
                sign = alice.sign(iv, data);
            }
            long end = System.currentTimeMillis();
            printQps("sign", total, start, end);
        }

        for (int k = 0; k < 3; k++) {
            int total = 1000000;
            long start = System.currentTimeMillis();
            for (int i = 0; i < total; i++) {
                assert bob.verify(iv, data, sign);
            }
            long end = System.currentTimeMillis();
            printQps("verify", total, start, end);
        }
    }
}
