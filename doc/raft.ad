= Raft
:toc:
:idprefix:
:sectnums:
:sectanchors:


== Raft Command


=== Leader sequence diagram

[plantuml, raft-command-server, svg]
....
skinparam monochrome true
skinparam shadowing false

CommandAction -> LeaderState: command()
activate LeaderState
   LeaderState -> RaftLog: appendEntry(Command)
   LeaderState -> Replicator: commit(Command)
   LeaderState <-- Replicator
   LeaderState -> StateMachine: apply(Command)
   activate StateMachine
       StateMachine -> RaftState: apply(Command)
       alt no session or session timeout
           StateMachine <-- RaftState: unknown session
       else session has response
           StateMachine <-- RaftState: response
       else execute command
           RaftState -> ResourceStateMachine: apply(Command)
           RaftState <-- ResourceStateMachine: command result
           RaftState -> session: put result
           StateMachine <-- RaftState: response
       end
       LeaderState <-- StateMachine
   deactivate StateMachine
   CommandAction <-- LeaderState
deactivate LeaderState
....


=== Client sequence diagram

[plantuml, raft-command-client, svg]
....
skinparam monochrome true
skinparam shadowing false

Client -> Node: get resource service
Client <-- Node: ResourceService
Client -> ResourceService: create path
ResourceService -> RaftStateClient: submit PathExists(path)
activate RaftStateClient
   RaftStateClient -> RaftStateClient: select member
   RaftStateClient -> Transport: send CommandRequest
   RaftStateClient <-- Transport: CommandResponse
   Client <-- RaftStateClient
deactivate RaftStateClient
....


== Raft Register


=== Follower sequence diagram

[plantuml, raft-register-client, svg]
....
skinparam monochrome true
skinparam shadowing false

RaftStateContext -> RaftStateContext: start
activate RaftStateContext
RaftStateContext -> FollowerState: transition

activate FollowerState
    FollowerState --> HeartbeatTimer: start
deactivate FollowerState

RaftStateContext -> RaftStateContext.register:
activate RaftStateContext.register
    RaftStateContext.register -> ClusterService: get members
    RaftStateContext.register <-- ClusterService: node[]
    group loop
        RaftStateContext.register -> RaftStateContext.register: select next node
        RaftStateContext.register -> TransportService: send(RegisterRequest)
        RaftStateContext.register <-- TransportService: RegisterResponse
        alt success
            RaftStateContext.register -> RaftStateContext: set leader
            RaftStateContext.register -> RaftStateContext: set session
        else error
            RaftStateContext.register -> RaftStateContext: set no leader
            RaftStateContext.register -> RaftStateContext.register: continue loop
        else no leader
            RaftStateContext.register -> RaftStateContext.register: schedule next loop
        end
    end
    RaftStateContext <-- RaftStateContext.register:
deactivate RaftStateContext.register

RaftStateContext -> KeepAliveTimer: start

deactivate RaftStateContext
....


=== Leader sequence diagram

[plantuml, raft-register-server, svg]
....
skinparam monochrome true
skinparam shadowing false

participant RaftStateContext
participant RegisterAction

RaftStateContext -> LeaderState: transition
activate LeaderState
LeaderState -> LeaderState: open
LeaderState -> RaftStateContext: set leader local node
RaftStateContext <-- LeaderState: transition
deactivate LeaderState
...
group handle RegisterRequest
    RegisterAction -> LeaderState: RegisterRequest
    activate LeaderState
        LeaderState -> RaftLog: append RegisterEntry
        LeaderState -> Replicator: commit
        LeaderState <-- Replicator
        LeaderState -> StateMachine: apply RegisterEntry
        activate StateMachine
            StateMachine -> RaftState: apply RegisterEntry
            activate RaftState
                RaftState -> sessions: put new RaftSession
                StateMachine <-- RaftState
            deactivate RaftState
            LeaderState <-- StateMachine
        deactivate StateMachine
        RegisterAction <-- LeaderState
    deactivate LeaderState
end
....


== Raft Empty Append Request


=== Leader sequence diagram

[plantuml, raft-empty-append-request-leader, svg]
....
skinparam monochrome true
skinparam shadowing false

HeartbeatTimer -> LeaderState: heartbeat members
activate LeaderState
    LeaderState -> Replicator: commit
    activate Replicator
        group loop
            Replicator -> Replica: commit
            activate Replica
                Replica -> Replica: empty commit
                Replica -> TransportService: send AppendRequest
                Replica <-- TransportService: AppendResponse
                Replica -> MemberState: update state
                Replica -> RaftLog: update state
                Replicator <-- Replica
            deactivate Replica
        end
        LeaderState <-- Replicator
    deactivate Replicator
    HeartbeatTimer <-- LeaderState
deactivate LeaderState

....


== Raft NoOpEntry


=== Leader sequence diagram

[plantuml, raft-no-op-entry-leader, svg]
....
skinparam monochrome true
skinparam shadowing false

LeaderState -> LeaderState: open
group open
    LeaderState -> LeaderState: commit entries
    group commit entries
        LeaderState -> RaftLog: append NoOpEntry
        LeaderState -> Replicator: commit
        LeaderState <-- Replicator
    end
    LeaderState -> HeartbeatTimer: start
    LeaderState -> RaftStateContext: set leader local node
end
....


=== Passive sequence diagram

[plantuml, raft-no-op-entry-follower, svg]
....
skinparam monochrome true
skinparam shadowing false

AppendAction -> PassiveState: AppendRequest(NoOpEntry)
activate PassiveState
    PassiveState -> RaftStateContext: update term
    PassiveState -> RaftStateContext: update leader
    PassiveState -> PassiveState: doAppendEntries
    alt loop
        PassiveState -> RaftLog: append NoOpEntry
    end
    PassiveState -> ExecutionContext: schedule apply commits
    PassiveState -> RaftStateContext: transition FollowerState
    AppendAction <- PassiveState: AppendResponse
deactivate PassiveState

PassiveState <- ExecutionContext: apply commits
activate PassiveState
    group apply commits
        PassiveState -> RaftStateContext: set commit index
        PassiveState -> RaftLog: next entry:
        PassiveState <-- RaftLog: NoOpEntry
        PassiveState -> StateMachine: apply NoOpEntry
        activate StateMachine
            StateMachine -> RaftState: apply NoOpEntry
            RaftState -> ExecutionContext: await
            RaftState -> ExecutionContext: set last applied
            StateMachine <-- RaftState
            PassiveState <-- StateMachine
        deactivate StateMachine
    end
    PassiveState <-- ExecutionContext
deactivate PassiveState
....